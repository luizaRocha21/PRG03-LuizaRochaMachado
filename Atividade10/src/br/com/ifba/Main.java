/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.ifba;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 *
 * @author luiza
 */
public class Main extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Main.class.getName());
    
    // Listas para armazenar os dados
    private List<PerfilUsuario> perfis = new ArrayList<>();
    private List<Usuario> usuarios = new ArrayList<>();
    private List<Sessao> sessoes = new ArrayList<>();
    private List<LogAuditoria> logs = new ArrayList<>();

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        inicializarDadosExemplo();
    }
    
    /**
     * Inicializa alguns dados de exemplo para teste
     */
    private void inicializarDadosExemplo() {
        try {
            // Criar perfis de exemplo
            PerfilUsuario admin = new PerfilUsuario("Administrador", 
                Arrays.asList("CADASTRAR_USUARIO", "EDITAR_USUARIO", "EXCLUIR_USUARIO", "VISUALIZAR_RELATORIOS"));
            PerfilUsuario usuarioComum = new PerfilUsuario("Usuário Comum", 
                Arrays.asList("VISUALIZAR_DADOS", "EDITAR_PROPRIA_CONTA"));
            
            perfis.add(admin);
            perfis.add(usuarioComum);
            
            // Criar usuário de exemplo
            Usuario usuarioAdmin = new Usuario(admin, "admin", "admin@email.com", "123456");
            usuarios.add(usuarioAdmin);
            
            logger.info("Dados de exemplo inicializados com sucesso");
        } catch (Exception e) {
            mostrarErro("Erro ao inicializar dados de exemplo: " + e.getMessage());
        }
    }
    
    /**
     * Exibe mensagem de erro para o usuário
     */
    private void mostrarErro(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Erro", JOptionPane.ERROR_MESSAGE);
        logger.severe(mensagem);
    }
    
    /**
     * Exibe mensagem de sucesso para o usuário
     */
    private void mostrarSucesso(String mensagem) {
        JOptionPane.showMessageDialog(this, mensagem, "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        logger.info(mensagem);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        btnCriarUsuario = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        btnCriarLog = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        btnPerfilUsuario = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnCriarSessao1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(139, 39, -1, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnCriarUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ifba/images/adicionar-usuario.png"))); // NOI18N
        btnCriarUsuario.setText("Criar Usuário");
        btnCriarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(btnCriarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnCriarUsuario)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 380, 80));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnCriarLog.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ifba/images/arquivo-de-log.png"))); // NOI18N
        btnCriarLog.setText("Criar Log de Auditoria");
        btnCriarLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarLogActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnCriarLog, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnCriarLog)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 380, 80));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnPerfilUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ifba/images/editar-informacao.png"))); // NOI18N
        btnPerfilUsuario.setText("Criar Perfil de usuário");
        btnPerfilUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPerfilUsuarioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(btnPerfilUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnPerfilUsuario)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 90, 380, 80));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnCriarSessao1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ifba/images/sala-de-apoio.png"))); // NOI18N
        btnCriarSessao1.setText("Criar Sessão");
        btnCriarSessao1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCriarSessao1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(btnCriarSessao1, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(btnCriarSessao1)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 180, 380, 80));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCriarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarUsuarioActionPerformed
        try {
            if (perfis.isEmpty()) {
                mostrarErro("É necessário criar perfis antes de criar usuários!");
                return;
            }
            
            // Coletar dados do usuário
            String nomeUsuario = JOptionPane.showInputDialog(this, "Digite o nome de usuário:");
            if (nomeUsuario == null || nomeUsuario.trim().isEmpty()) {
                mostrarErro("Nome de usuário é obrigatório!");
                return;
            }
            
            String email = JOptionPane.showInputDialog(this, "Digite o e-mail:");
            if (email == null || email.trim().isEmpty()) {
                mostrarErro("E-mail é obrigatório!");
                return;
            }
            
            String senha = JOptionPane.showInputDialog(this, "Digite a senha:");
            if (senha == null || senha.trim().isEmpty()) {
                mostrarErro("Senha é obrigatória!");
                return;
            }
            
            // Selecionar perfil
            String[] opcoesPerfis = perfis.stream()
                    .map(p -> p.getId() + " - " + p.getDescricao())
                    .toArray(String[]::new);
            
            String perfilSelecionado = (String) JOptionPane.showInputDialog(this,
                    "Selecione o perfil:",
                    "Seleção de Perfil",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    opcoesPerfis,
                    opcoesPerfis[0]);
            
            if (perfilSelecionado == null) {
                return;
            }
            
            Long perfilId = Long.parseLong(perfilSelecionado.split(" - ")[0]);
            PerfilUsuario perfil = perfis.stream()
                    .filter(p -> p.getId().equals(perfilId))
                    .findFirst()
                    .orElse(null);
            
            // Criar usuário
            Usuario novoUsuario = new Usuario(perfil, nomeUsuario, email, senha);
            usuarios.add(novoUsuario);
            
            // Criar log automático
            LogAuditoria log = new LogAuditoria(novoUsuario, "Usuário criado com sucesso", "127.0.0.1");
            logs.add(log);
            novoUsuario.adicionarLog(log);
            
            mostrarSucesso("Usuário criado com sucesso!\nID: " + novoUsuario.getId());
            
            // Testar login
            boolean loginSucesso = novoUsuario.logar(senha);
            if (loginSucesso) {
                mostrarSucesso("Login realizado com sucesso para o usuário: " + nomeUsuario);
            }
            
        } catch (Exception e) {
            mostrarErro("Erro ao criar usuário: " + e.getMessage());
        }
    }//GEN-LAST:event_btnCriarUsuarioActionPerformed

    private void btnPerfilUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPerfilUsuarioActionPerformed
        try {
            // Coletar dados do perfil
            String descricao = JOptionPane.showInputDialog(this, "Digite a descrição do perfil:");
            if (descricao == null || descricao.trim().isEmpty()) {
                mostrarErro("Descrição do perfil é obrigatória!");
                return;
            }
            
            // Coletar permissões
            String permissoesInput = JOptionPane.showInputDialog(this, 
                    "Digite as permissões separadas por vírgula:\nEx: CADASTRAR_USUARIO,EDITAR_USUARIO,VISUALIZAR_DADOS");
            
            List<String> permissoes = new ArrayList<>();
            if (permissoesInput != null && !permissoesInput.trim().isEmpty()) {
                String[] permissoesArray = permissoesInput.split(",");
                for (String permissao : permissoesArray) {
                    permissoes.add(permissao.trim());
                }
            }
            
            // Criar perfil
            PerfilUsuario novoPerfil = new PerfilUsuario(descricao, permissoes);
            perfis.add(novoPerfil);
            
            mostrarSucesso("Perfil criado com sucesso!\nID: " + novoPerfil.getId() + 
                          "\nPermissões: " + novoPerfil.getPermissoes());
            
        } catch (Exception e) {
            mostrarErro("Erro ao criar perfil: " + e.getMessage());
        }
    }//GEN-LAST:event_btnPerfilUsuarioActionPerformed

    private void btnCriarLogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarLogActionPerformed
        try {
            if (usuarios.isEmpty()) {
                mostrarErro("É necessário criar usuários antes de criar logs!");
                return;
            }
            
            // Selecionar usuário
            String[] opcoesUsuarios = usuarios.stream()
                    .map(u -> u.getId() + " - " + u.getNomeUsuario())
                    .toArray(String[]::new);
            
            String usuarioSelecionado = (String) JOptionPane.showInputDialog(this,
                    "Selecione o usuário:",
                    "Seleção de Usuário",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    opcoesUsuarios,
                    opcoesUsuarios[0]);
            
            if (usuarioSelecionado == null) {
                return;
            }
            
            Long usuarioId = Long.parseLong(usuarioSelecionado.split(" - ")[0]);
            Usuario usuario = usuarios.stream()
                    .filter(u -> u.getId().equals(usuarioId))
                    .findFirst()
                    .orElse(null);
            
            // Coletar ação
            String acao = JOptionPane.showInputDialog(this, "Digite a ação do log:");
            if (acao == null || acao.trim().isEmpty()) {
                mostrarErro("Ação do log é obrigatória!");
                return;
            }
            
            String ip = JOptionPane.showInputDialog(this, "Digite o IP:", "127.0.0.1");
            if (ip == null || ip.trim().isEmpty()) {
                ip = "127.0.0.1";
            }
            
            // Criar log
            LogAuditoria log = new LogAuditoria(usuario, acao, ip);
            logs.add(log);
            usuario.adicionarLog(log);
            
            mostrarSucesso("Log de auditoria criado com sucesso!\nID: " + log.getId());
            
            // Exibir todos os logs do usuário
            StringBuilder logsUsuario = new StringBuilder();
            logsUsuario.append("Logs do usuário ").append(usuario.getNomeUsuario()).append(":\n");
            for (LogAuditoria l : usuario.getLogsAuditoria()) {
                logsUsuario.append("- ").append(l.getDataHora()).append(": ").append(l.getAcao()).append("\n");
            }
            
            JOptionPane.showMessageDialog(this, logsUsuario.toString(), "Logs do Usuário", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (Exception e) {
            mostrarErro("Erro ao criar log de auditoria: " + e.getMessage());
        }
    }//GEN-LAST:event_btnCriarLogActionPerformed

    private void btnCriarSessao1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCriarSessao1ActionPerformed
        try {
            if (usuarios.isEmpty()) {
                mostrarErro("É necessário criar usuários antes de criar sessões!");
                return;
            }
            
            // Selecionar usuário
            String[] opcoesUsuarios = usuarios.stream()
                    .map(u -> u.getId() + " - " + u.getNomeUsuario())
                    .toArray(String[]::new);
            
            String usuarioSelecionado = (String) JOptionPane.showInputDialog(this,
                    "Selecione o usuário:",
                    "Seleção de Usuário",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    opcoesUsuarios,
                    opcoesUsuarios[0]);
            
            if (usuarioSelecionado == null) {
                return;
            }
            
            Long usuarioId = Long.parseLong(usuarioSelecionado.split(" - ")[0]);
            Usuario usuario = usuarios.stream()
                    .filter(u -> u.getId().equals(usuarioId))
                    .findFirst()
                    .orElse(null);
            
            // Testar login antes de criar sessão
            String senha = JOptionPane.showInputDialog(this, "Digite a senha do usuário para criar sessão:");
            if (senha == null) {
                return;
            }
            
            boolean loginSucesso = usuario.logar(senha);
            if (!loginSucesso) {
                mostrarErro("Não foi possível criar sessão. Senha incorreta ou usuário inativo.");
                return;
            }
            
            // Criar sessão
            Sessao sessao = usuario.criarSessao();
            if (sessao != null) {
                sessoes.add(sessao);
                mostrarSucesso("Sessão criada com sucesso!\nToken: " + sessao.getToken() + 
                              "\nExpira em: " + sessao.getDataExpiracao());
                
                // Exibir todas as sessões do usuário
                StringBuilder sessoesUsuario = new StringBuilder();
                sessoesUsuario.append("Sessões do usuário ").append(usuario.getNomeUsuario()).append(":\n");
                for (Sessao s : usuario.getSessoes()) {
                    sessoesUsuario.append("- Token: ").append(s.getToken())
                                 .append(" (Criada em: ").append(s.getDataCriacao()).append(")\n");
                }
                
                JOptionPane.showMessageDialog(this, sessoesUsuario.toString(), "Sessões do Usuário", JOptionPane.INFORMATION_MESSAGE);
            } else {
                mostrarErro("Falha ao criar sessão para o usuário.");
            }
            
        } catch (Exception e) {
            mostrarErro("Erro ao criar sessão: " + e.getMessage());
        }
    }//GEN-LAST:event_btnCriarSessao1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Main().setVisible(true));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCriarLog;
    private javax.swing.JButton btnCriarSessao1;
    private javax.swing.JButton btnCriarUsuario;
    private javax.swing.JButton btnPerfilUsuario;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    // End of variables declaration//GEN-END:variables
}
